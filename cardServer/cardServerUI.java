/*
Name : Roger Ojar
ID : 809000518
Assignment 1
 */

package javaapplication2;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.image.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.io.*;
import java.io.File;
import java.net.*;
import java.net.URI;
import java.util.*;
import java.util.Arrays;
import javax.imageio.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 *
 * @author Roger
 */
public class cardServerUI extends javax.swing.JFrame {

        ArrayList<String> cardList = new ArrayList<String>();

        String[] cardArr = {"2H","3H","4H","5H","6H","7H","8H","9H","10H","JH","QH","KH","AH","2S","3S","4S","5S","6S","7S","8S","9S","10S","JS","QS","KS","AS","2C","3C","4C","5C","6C","7C","8C","9C","10C","JC","QC","KC","AC","2D","3D","4D","5D","6D","7D","8D","9D","10D","JD","QD","KD","AD"};
        int[] cardCount = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        
        String[] lastFive = new String[5];
        
		DatagramSocket aSocketClient = null;
	
        InetAddress senderAddress;
        int senderPort = 0;
        boolean listen = true;
        
		byte[] buffer = new byte[1000];
    /**
     * Creates new form NewJFrame
     */
    public cardServerUI() {

        initComponents();
        displayPic();
        try{
            DatagramSocket aSocket = new DatagramSocket(6789);
            Connection c = new Connection(aSocket);
            Thread thread2 = new Thread(c);
            thread2.start();
           }catch (SocketException e){System.out.println("Socket: " + e.getMessage());
	}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel4.setText("ID : 809000518");
        jLabel4.setToolTipText("");

        jLabel5.setText("Name : Roger Ojar");

        jLabel6.setText("CARD LOG");

        jLabel7.setText("CARD IMAGE");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(245, 245, 245))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    class Connection extends Thread {

	DatagramSocket aSocket = null;
        public Connection (DatagramSocket aClientSocket) {
		aSocket = aClientSocket;
                aSocketClient = aSocket;
	}
        public void run(){
            try{

			jTextArea2.append("Server Running...\n");
      
            while (listen) {
                
                    // receive request
                    byte[] buf = new byte[10000];
                    DatagramPacket packet = new DatagramPacket(buf, buf.length);
                    aSocket.receive(packet);
                    
                    // figure out response
                    String packetData = new String(packet.getData());
                     senderPort = packet.getPort();

                    senderAddress = packet.getAddress();
                    displayPic2(packetData);
    
            }
            }catch (SocketException e){System.out.println("Socket: " + e.getMessage());
		}catch (IOException e) {System.out.println("IO: " + e.getMessage());
		}
	}
    }
    
    private void displayPic2(String str){
        BufferedImage image = null;
      
        str = str.trim();

        jTextArea2.append(str + " received from client.\n");

        if(str.equals("QUIT")){
        	cardSummary();
                
        }else if(str.equals("SPECIAL")){

             findDups();
             
        }else{
            try{
                image = ImageIO.read(new File("JPEG_CARDS/" + str + ".jpg"));
                addCount(str); 
                cardList.add(str);
            }catch (Exception e){
                 e.printStackTrace();
                System.exit(1);
            }
            ImageIcon imageIcon = new ImageIcon(image.getScaledInstance(354, 420, 4));
            jLabel2.setIcon(imageIcon);
        }
    }
    
    private void findDups(){
        if(cardList.size() >= 5){
            
            BufferedImage image = null;
          /*  String c1 = cardList.get(cardList.size() - 1);
            String c2 = cardList.get(cardList.size() - 2);
            String c3 = cardList.get(cardList.size() - 3);
            String c4 = cardList.get(cardList.size() - 4);
            String c5 = cardList.get(cardList.size() - 5);*/
			int cardNum = 0;
            
            try{
                for(int i = 0;i <= cardArr.length - 1; i++){
		          	if(cardCount[i] > 0){
			           cardNum = cardNum + cardCount[i];
		           }
		        }
                String res = Integer.toString(cardNum);
                byte[] buffer = res.getBytes();
                DatagramPacket reply = new DatagramPacket(buffer, buffer.length, senderAddress,senderPort);                
                aSocketClient.send(reply);
            	Thread.sleep(5000);
            }catch (Exception e){
                 e.printStackTrace();
                System.exit(1);
            }    
        }  
    }
    
    private void addCount(String card){
        for(int i = 0;i <= cardArr.length - 1; i++){
             if(card.equals(cardArr[i])){
                 cardCount[i] = cardCount[i] + 1;
             }
        } 
    }
    
    private void cardSummary(){
        JFrame editorFrame = new JFrame("Card Summary");
        JPanel jp = new JPanel();
        jp.setLayout(new BoxLayout(jp, BoxLayout.Y_AXIS));

        JLabel jLabel = new JLabel();

        
        for(int i = 0;i <= cardArr.length - 1; i++){

           if(cardCount[i] > 0){
	           BufferedImage image = null;
			        try{
			          image = ImageIO.read(new File("JPEG_CARDS/" + cardArr[i] + ".jpg"));
			        }catch (Exception e){
			          e.printStackTrace();
			          System.exit(1);
			        }
	           	ImageIcon imageIcon2 = new ImageIcon(image.getScaledInstance(354, 420, 4));;
	        	JLabel jLabeltemp = new JLabel("JLabel" + i);
	        	jLabeltemp.setIcon(imageIcon2);
	        	
	        	//name
	        	jLabeltemp.setText("X " + cardCount[i]);
	        	
	        	jp.add(jLabeltemp);
	            jp.add(Box.createRigidArea(new Dimension(0, 60)));
           }
        }
        
        jp.add(Box.createVerticalGlue());
        JScrollPane scrollPane = new JScrollPane(jp);
       	editorFrame.setPreferredSize(new Dimension(500, 500));
        editorFrame.getContentPane().add(jp, BorderLayout.CENTER);
        editorFrame.add(new JScrollPane(jp));
        editorFrame.pack();
        editorFrame.setLocationRelativeTo(null);
        editorFrame.setVisible(true);
    }
    
    private void displayPic(){
        BufferedImage image = null;
        try{
          image = ImageIO.read(new File("JPEG_CARDS/cardBack.jpg"));
        }catch (Exception e){
          e.printStackTrace();
          System.exit(1);
        }
        ImageIcon imageIcon = new ImageIcon(image.getScaledInstance(354, 420, 4));
        jLabel2.setIcon(imageIcon);
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cardServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cardServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cardServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cardServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

                new cardServerUI().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
